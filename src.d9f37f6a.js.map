{"version":3,"sources":["src/index.js"],"names":["html","document","documentElement","canvas","getElementById","context","getContext","frameCount","getStrIndex","index","toString","padStart","currentFrame","imagesMap","Map","preloadImages","i","img","Image","src","set","width","height","onload","drawImage","prevIdx","updateImage","clearRect","get","e","console","log","getImgIddex","offsetTop","clientHeight","scrollTop","maxScrollTop","Math","min","window","innerHeight","scrollHeight","scrollFraction","ceil","addEventListener","frameIndex","requestAnimationFrame"],"mappings":";AA0Fa,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,MAAA,GAAA,YAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,QAAA,QAAA,GAAA,KAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,WAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OAAA,IAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,EAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,GAAA,OAAA,MA1Fb,IAAMA,EAAOC,SAASC,gBAChBC,EAASF,SAASG,eAAe,kBACjCC,EAAUF,EAAOG,WAAW,MAE5BC,EAAa,IACbC,EAAc,SAACC,GAAUA,OAAAA,EAAMC,WAAWC,SAAS,EAAG,MACtDC,EAAe,SAACH,GACoBD,MAAAA,wCAAAA,OAAAA,EAAYC,GADjC,SAGfI,EAAY,IAAIC,IAEhBC,EAAa,WAAG,IAAA,EAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACXC,IAAAA,EAAI,EAAGA,GAAKT,EAAYS,KACzBC,EAAM,IAAIC,OACZC,IAAMP,EAAaI,GAEvBH,EAAUO,IAAIZ,EAAYQ,GAAIC,GALZ,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MAAhBF,OAAAA,WAAa,OAAA,EAAA,MAAA,KAAA,YAAA,GASbE,EAAM,IAAIC,MAEhBD,EAAIE,IAAMP,EAAa,GAEvBT,EAAOkB,MAAQ,IACflB,EAAOmB,OAAS,IAEhBL,EAAIM,OAAS,WACXlB,EAAQmB,UAAUP,EAAK,EAAG,IAG5B,IAyBIQ,EAzBEC,EAAc,SAACjB,GACnBJ,EAAQsB,UAAU,EAAG,EAAGxB,EAAOkB,MAAOlB,EAAOmB,QACzC,IACFjB,EAAQmB,UAAUX,EAAUe,IAAIpB,EAAYC,IAAS,EAAG,GACxD,MAAOoB,GACPC,QAAQC,IAAIF,EAAGpB,EAAOI,EAAUe,IAAIpB,EAAYC,OAIpD,SAASuB,IACCC,IAAAA,EAA4B9B,EAA5B8B,UAAWC,EAAiB/B,EAAjB+B,aACbC,EAAYnC,EAAKmC,UAEjBC,EAAeC,KAAKC,IACc,KAArCC,OAAOC,YAAcN,GACtBlC,EAAKyC,cAAgBN,EAAYD,IAG7BQ,GACHP,EAAYI,OAAOC,aAAeP,EAAYC,IAC/CE,EAEKC,OAAAA,KAAKC,IAAI/B,EAAY8B,KAAKM,KAAKD,EAAiBnC,IAKzDgC,OAAOK,iBAAiB,SAAU,WAC1BC,IAAAA,EAAab,IAEfa,EAAa,EACfpB,EAAU,GAAKC,EAAY,GAClBmB,GAActC,EACvBkB,EAAUlB,GAAcmB,EAAYnB,GAEpCuC,sBAAsB,WAAMpB,OAAAA,EAAYmB,KAG1CpB,EAAUoB,IAqBZ9B","file":"src.d9f37f6a.js","sourceRoot":"..","sourcesContent":["const html = document.documentElement;\nconst canvas = document.getElementById(\"hero-lightpass\");\nconst context = canvas.getContext(\"2d\");\n\nconst frameCount = 100;\nconst getStrIndex = (index) => index.toString().padStart(4, \"0\");\nconst currentFrame = (index) =>\n  `./public/images/products/pro_2/Pro_2_${getStrIndex(index)}.png`;\n\nconst imagesMap = new Map();\n\nconst preloadImages = async () => {\n  for (let i = 0; i <= frameCount; i++) {\n    const img = new Image();\n    img.src = currentFrame(i);\n\n    imagesMap.set(getStrIndex(i), img);\n  }\n};\n\nconst img = new Image();\n\nimg.src = currentFrame(0);\n\ncanvas.width = 1000;\ncanvas.height = 1000;\n\nimg.onload = function () {\n  context.drawImage(img, 0, 0);\n};\n\nconst updateImage = (index) => {\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  try {\n    context.drawImage(imagesMap.get(getStrIndex(index)), 0, 0);\n  } catch (e) {\n    console.log(e, index, imagesMap.get(getStrIndex(index)));\n  }\n};\n\nfunction getImgIddex() {\n  const { offsetTop, clientHeight } = canvas;\n  const scrollTop = html.scrollTop;\n\n  const maxScrollTop = Math.min(\n    (window.innerHeight - clientHeight) * 0.75,\n    html.scrollHeight - (scrollTop + clientHeight)\n  );\n\n  const scrollFraction =\n    (scrollTop + window.innerHeight - (offsetTop + clientHeight)) /\n    maxScrollTop;\n\n  return Math.min(frameCount, Math.ceil(scrollFraction * frameCount));\n}\n\nlet prevIdx;\n\nwindow.addEventListener(\"scroll\", () => {\n  const frameIndex = getImgIddex();\n\n  if (frameIndex < 0) {\n    prevIdx > 0 && updateImage(0);\n  } else if (frameIndex >= frameCount) {\n    prevIdx < frameCount && updateImage(frameCount);\n  } else {\n    requestAnimationFrame(() => updateImage(frameIndex));\n  }\n\n  prevIdx = frameIndex;\n\n  // if (frameIndex < 0 || frameIndex > 100) {\n  //   if (frameIndex < 0) {\n  //     updateImage(0);\n  //   } else if (frameIndex > frameCount) {\n  //     updateImage(frameCount);\n  //   }\n\n  //   return;\n  // }\n\n  // requestAnimationFrame(() => updateImage(frameIndex));\n\n  // if (frameIndex < 0 || frameIndex > 100) {\n  //   return;\n  // }\n\n  // requestAnimationFrame(() => updateImage(frameIndex));\n});\n\npreloadImages();\n"]}